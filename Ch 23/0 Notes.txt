In this chapter we move up a level of abstraction, and consider collections 
of objects working together.

Our focus will be on how objects are connected to each other, and how one 
can make those connections as loose as possible.

Our primary tool for analyzing connectedness will be the concepts of 
visibility and dependency.


Difficulties in developing large scale programs are often not so much 
a matter of algorithmic complexity as they are of communication complexity.

If several programmers are working together on a project, need to control 
the amount of information one programmer must have about the code being 
developed by a second programmer.

Visibility is an attribute of names.
* Names of variables, functions, fields, whatever.
* If you can't name something, you can't manipulate it.
* Languages already have a variety of mechanisms for the control of name visibility.
* OOP languages introduce a few new twists.

Dependency
* Dependency describes the degree to which one software component relies 
  on another component to perform its responsibilities.

* A high degree of dependency obviously limits code reuse - moving one 
  component to a new project.


Coupling and Cohesion